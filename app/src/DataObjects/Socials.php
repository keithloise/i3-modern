<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use SilverStripe\Security\Member;

    class Socials extends DataObject
    {
        private static $default_sort = 'Sort ASC';

        private static $db = [
            'Name'     => 'Varchar',
            'Type'     => 'Varchar',
            'Icon'     => 'Varchar',
            'Archived' => 'Boolean',
            'Sort'     => 'Int',
        ];

        private static $has_one = [
            'Member' => Member::class
        ];

        private static $summary_fields = [
            'Name',
            'Type',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('MemberID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('MemberRO', 'Member', $this->Member()->Name));

            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('Type', 'Social type',
                array(
                    'Email'    => 'Email',
                    'LinkedIn' => 'LinkedIn',
                    'Twitter'  => 'Twitter',
                    'Facebook' => 'Facebook',
                    'AboutME'  => 'AboutME',
                    'Instagram'=> 'Instagram'
                )));
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('Icon'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        protected function onBeforeWrite()
        {
            parent::onBeforeWrite(); // TODO: Change the autogenerated stub

            if ($this->Type == 'Email')     $this->Icon = 'fas fa-envelope';
            if ($this->Type == 'LinkedIn')  $this->Icon = 'fab fa-linkedin';
            if ($this->Type == 'Twitter')   $this->Icon = 'fab fa-twitter-square';
            if ($this->Type == 'Facebook')  $this->Icon = 'fab fa-facebook-square';
            if ($this->Type == 'AboutME')   $this->Icon = 'about.me';
            if ($this->Type == 'Instagram') $this->Icon = 'fab fa-instagram-square';
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
